{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Getting into deadlock:\
\
Basically just letting all philosophers pick up their left fork and then they all sit their waiting for a right fork to be available.\
\
Solving deadlock:\
\
To solve the deadlock we implemented a class called \'94Fork\'94 which has 2 functions, grab and release. It can only be grabbed if its owner (philosopher variable inside class) is null. When grabbed it will set the owner to that Thread(Philosopher). When the philosopher is done eating, it will release the forks and notify one philosopher that is waiting for one of the two forks that was released to be available, it will do that for each of the forks. The result is that the number of times they\'92ve eaten are equal amount +-1.\
\
Example output after 20 seconds of run time:\
\
Philosopher	 Eaten\
0				6\
1				6\
2				6\
3				5\
4				5\
5				6\
6				6\
7				6}